"
"  █████╗ ██╗      ██████╗ ██╗  ██╗    ███╗   ██╗██╗ ██████╗  █████╗ ███╗   ███╗
" ██╔══██╗██║     ██╔═══██╗██║ ██╔╝    ████╗  ██║██║██╔════╝ ██╔══██╗████╗ ████║
" ███████║██║     ██║   ██║█████╔╝     ██╔██╗ ██║██║██║  ███╗███████║██╔████╔██║
" ██╔══██║██║     ██║   ██║██╔═██╗     ██║╚██╗██║██║██║   ██║██╔══██║██║╚██╔╝██║
" ██║  ██║███████╗╚██████╔╝██║  ██╗    ██║ ╚████║██║╚██████╔╝██║  ██║██║ ╚═╝ ██║
" ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝    ╚═╝  ╚═══╝╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝

set nocompatible " Set no compatible

" Plugins - Vim-plug
" ``````````````````
" Plug 'rhysd/vim-clang-format'

call plug#begin()
" |-- Colorschemes --|
Plug 'NLKNguyen/papercolor-theme'
Plug 'aloknigam247/ayu-vim'
Plug 'sickill/vim-monokai'
let ayucolor="dark"
Plug 'jsit/toast.vim'

"" |-- Context --|
" Plug 'wellle/context.vim', {'on': 'ContextToggle'}
" let g:context_border_char = '-'
" let g:Context_border_indent = { -> 0 } " Full width seperator
" let g:context_highlight_border = 'Special'

"" |-- CSS Colors --|
Plug 'ap/vim-css-color'

"" |-- Cursorword --|
Plug 'itchyny/vim-cursorword'

"" |-- Git Branch --|
" Plug 'itchyny/vim-gitbranch'

"" |-- Indentline --|
""  Plug 'nathanaelkane/vim-indent-guides'
""Plug 'thaerkh/vim-indentguides'
""let g:indentguides_spacechar = '▕'

"" |-- Interesting Words --|
Plug 'lfv89/vim-interestingwords'
let g:interestingWordsGUIColors = ['#AEEE00', '#48ACF0', '#1446A0', '#5BC0BE', '#679436', '#F6AE2D', '#EDE745', '#5448C8', '#E2AFDE', '#CC5A71', '#C81D25', '#C9DDFF', '#EB6534', '#63372C', '#f15bb5']
let g:interestingWordsRandomiseColors = 1

"" |-- LeaderF --|
""Plug 'Yggdroot/LeaderF'
""let g:Lf_WindowPosition = 'popup'
""let g:Lf_PreviewInPopup = 1
""let g:Lf_StlSeparator = { 'left': '', 'right': '' }

"" |-- Lightline --|
Plug 'itchyny/lightline.vim'
let g:lightline = {
            \ 'active': {
            \     'left': [['mode', 'paste'], ['readonly', 'filename_logo', 'modified', 'p4Info']],
            \     'right': [['lineinfo'], ['fileformat', 'percent']]
            \ },
            \ 'inactive': {
            \     'left': [['mode', 'paste'], ['readonly', 'filename_logo', 'modified']],
            \     'right': [['lineinfo'], ['percent']]
            \ },
            \ 'colorscheme': 'ayu',
            \ 'component': {
            \   'lineinfo': ' %l:%v',
            \ },
            \ 'component_function': {
            \   'filename_logo': 'MyFilename',
            \   'fileformat': 'MyFileformat',
            \   'p4Info': 'P4Info',
            \   'readonly': 'LightlineReadonly',
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }
function! LightlineReadonly()
    return &readonly ? '' : ''
endfunction

let g:fStat = {}
function! P4Info()
    if( g:fStat->has_key(expand('%:t')))
        return g:fStat[expand('%:t')]
    endif

    let stat = systemlist('p4 fstat -T headRev,haveRev ' . expand('%:t'))
    if len(stat) < 2
        let g:fStat[expand('%:t')] = ''
        return ''
    endif
    let head = split(stat[0], ' ')[-1]
    let have = split(stat[1], ' ')[-1]
    let st = '#' . have . '/' .  head
    echo st
    let g:fStat[expand('%:t')] = st
    return st
endfunction

" |-- Devicons --|
" Plug 'ryanoasis/vim-devicons'
function! MyFileformat()
    let fmtLogo = { 
                \ 'dos'  : '',
                \ 'max'  : '',
                \ 'unix' : ''
                \ }
    return fmtLogo[&fileformat]
endfunction

function! MyFilename()
    let fileLogo = {
                \ 'ai'              : '',
                \ 'awk'             : '',
                \ 'bash'            : '',
                \ 'c'               : '',
                \ 'clojure'         : '',
                \ 'coffee'          : '',
                \ 'cpp'             : '',
                \ 'csh'             : '',
                \ 'css'             : '',
                \ 'd'               : '',
                \ 'dart'            : '',
                \ 'dosbatch'        : '',
                \ 'dosini'          : '',
                \ 'erlang'          : '',
                \ 'fish'            : '',
                \ 'forth'           : '',
                \ 'go'              : '',
                \ 'haml'            : '',
                \ 'haskell'         : '',
                \ 'hbs'             : '',
                \ 'html'            : '',
                \ 'ico'             : '',
                \ 'java'            : '',
                \ 'javascript'      : '',
                \ 'javascriptreact' : '',
                \ 'json'            : '',
                \ 'ksh'             : '',
                \ 'less'            : '',
                \ 'lhaskell'        : '',
                \ 'log'             : '',
                \ 'lua'             : '',
                \ 'markdown'        : '',
                \ 'ocaml'           : 'λ',
                \ 'perl'            : '',
                \ 'php'             : '',
                \ 'plaintex'        : 'ﭨ',
                \ 'python'          : '',
                \ 'r'               : '',
                \ 'rmd'             : '',
                \ 'rs'              : '',
                \ 'ruby'            : '',
                \ 'sass'            : '',
                \ 'scala'           : '',
                \ 'scss'            : '',
                \ 'sh'              : '',
                \ 'slim'            : '',
                \ 'sln'             : '',
                \ 'sql'             : '',
                \ 'styl'            : '',
                \ 'suo'             : '',
                \ 'svg'             : '',
                \ 'swift'           : '',
                \ 'tads'            : '',
                \ 'tcl'             : '',
                \ 'tcsh'            : '',
                \ 'toml'            : '',
                \ 'tsx'             : '',
                \ 'twig'            : '',
                \ 'typescript'      : '',
                \ 'vim'             : '',
                \ 'vue'             : '',
                \ 'xml'             : '',
                \ 'yaml'            : '',
                \ 'zsh'             : '',
                \ }

  " let s:file_node_exact_matches = {
  "       \ 'gruntfile.coffee'                 : '',
  "       \ 'gruntfile.js'                     : '',
  "       \ 'gruntfile.ls'                     : '',
  "       \ 'gulpfile.coffee'                  : '',
  "       \ 'gulpfile.js'                      : '',
  "       \ 'gulpfile.ls'                      : '',
  "       \ 'mix.lock'                         : '',
  "       \ 'dropbox'                          : '',
  "       \ '.ds_store'                        : '',
  "       \ 'favicon.ico'                      : '',
  "       \ 'license'                          : '',
  "       \ 'node_modules'                     : '',
  "       \ 'react.jsx'                        : '',
  "       \ 'procfile'                         : '',
  "       \ 'dockerfile'                       : '',
  "       \ 'docker-compose.yml'               : '',
  "       \ 'rakefile'                         : '',
  "       \ 'config.ru'                        : '',
  "       \ 'gemfile'                          : '',
  "       \ 'makefile'                         : '',
  "       \ 'cmakelists.txt'                   : ''
  "       \}

  "       \ '.*jquery.*\.js$'       : '',
  "       \ '.*angular.*\.js$'      : '',
  "       \ '.*backbone.*\.js$'     : '',
  "       \ '.*require.*\.js$'      : '',
  "       \ '.*materialize.*\.js$'  : '',
  "       \ '.*materialize.*\.css$' : '',
  "       \ '.*mootools.*\.js$'     : '',
  "       \ '.*vimrc.*'             : '',
  "       \ 'Vagrantfile$'          : ''
  "       \}
    if( fileLogo->has_key(&filetype))
        return fileLogo[&filetype] . ' ' . expand('%:t') 
    else
        return expand('%:t')
    endif
endfunction

""Plug 'cj/vim-webdevicons'
""function! MyFiletype()
""  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
""endfunction
""
" function! MyFileformat()
"   return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
" endfunction

"" |- Nerd Tree -|
"" Plug 'preservim/nerdtree'

" Plug 'sheerun/vim-polyglot'
" let g:polyglot_disabled = ['cpp']

"" |-- Syntax Highlight --|
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['c', 'cpp']}
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1

Plug 'srcery-colors/srcery-vim'

"" |-- Tagbar --|
" Plug 'preservim/tagbar', {'on': 'TagBar'}

"" |-- Undo Tree --|
""  Plug 'mbbill/undotree'

" Plug 'ajh17/VimCompletesMe'

"" |-- Vim Signature --|
""  Plug 'kshenoy/vim-signature'

"" |-- Vim Signify --|
Plug 'mhinz/vim-signify'
let g:signify_line_highlight = 0
let g:signify_fold_context = [1, 3] " [foldlevel0, foldlevel1]
" Commands:
"   SignifyDiff: Opens a diff in new tab
"   SignifyFold: Opens folded unchanged lines

"" |-- Vim Vp4 --|
" Plug 'ngemily/vim-vp4'

" |-- Wilder --|
Plug 'gelguy/wilder.nvim'

Plug 'nfvs/vim-perforce'
let g:perforce_auto_source_dirs = [$CLIENT_HOME]

"Plug 'MattesGroeger/vim-bookmarks'

"" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

"" Plug 'osyo-manga/vim-over', {'on': 'OverCommandLine'}
"" let g:over#command_line#substitute#replace_pattern_visually = 1

Plug 'tpope/vim-commentary'

"" Plug 'mg979/vim-visual-multi'

"" Plug 'xolox/vim-easytags'
"" Plug 'xolox/vim-misc'

" |-- CSV --|
Plug 'chrisbra/csv.vim', {'for': 'csv'}
:let g:csv_delim=','

" Plug 'mengelbrecht/lightline-bufferline'
" let g:lightline#bufferline#enable_devicons=1
            " \ 'tabline': {
            " \   'left': [ ['buffers'] ],
            " \   'right': [ ['close'] ]
            " \ },
            " \ 'component_expand': {
            " \   'buffers': 'lightline#bufferline#buffers'
            " \ },
            " \ 'component_type': {
            " \   'buffers': 'tabsel'
            " \ },

" |-- Git Blamer --|
"Plug 'zivyangll/git-blame.vim'
"nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

call plug#end()

" Wilder Config
" `````````````
call wilder#enable_cmdline_enter()
set wildcharm=<Tab>
cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
call wilder#set_option('modes', ['/', '?', ':'])

" Signify
" ```````
let g:signify_vcs_cmds = {
            \ 'git':      'git diff --no-color --no-ext-diff -U0 -- %f',
            \ 'perforce': 'p4 info '. sy#util#shell_redirect('%n') . (has('win32') ? ' &&' : ' && env P4DIFF= P4COLORS=') .' p4 diff -du0 -f %f'
            \ }


" Variables
" `````````
" {{{
let &titleold             = getcwd() " Set console title to path on vim exit
let c_curly_error         = 1        " Show curly braces error
let c_space_errors        = 1        " Highlight trailing spaces
let g:diff_translations   = 0        " Disables localisations and speeds up syntax highlighting in diff mode
let g:load_doxygen_syntax = 1        " Recognize doxygen comment style
let g:netrw_liststyle     = 3        " Set netrw style as tree
" }}}


" Config Options
" ``````````````
" {{{
set autoread              " Auto reload changed file
set autowrite             " Auto write changes
set clipboard=unnamedplus " Use + clipboard buffer
set foldnestmax=2         " Max fold level
set nobackup              " Do not create backup file
set noswapfile            " Disable swap file
set path+=**              " Look for all files in sub dirs
set termwinkey=<ESC>      " Set termwinkey as ESC
" }}}


" Editor Settings
" ```````````````
" {{{
set backspace=2  " Set backspace to indent,eol,start
set breakindent  " Every wrapped line will continue visually indented
set cpoptions+=Z " When using w! while the 'readonly' option is set,don't reset 'readonly'
set expandtab    " Convert tabs to spaces
set history=1000 " Increase undo limit
set shiftwidth=4 " When shifting, indent using spaces
set tabstop=4    " Indent using spaces
set wrap         " Wrap text
" }}}


" UI Options
" ``````````
let g:netrw_banner = 0        " Turn off banner in netrw
set background=dark           " Select appropriate colors for dark or light
set cinoptions+=l1,N-s,E-s,(0,w1
set confirm                  " Raise dialog on quit if file has unsaved changes
set culopt=number,screenline " Highlight current line and line number of current window
set cursorline               " Highlight the line currently under cursor
set diffopt+=vertical        " Open diff in vertical split
set encoding=utf-8           " Handles multibyte characters correctly
set laststatus=2             " Show status line on the bottom on multiple files
set lazyredraw               " Don't redraw screen on macros, registers and other commands.
set lcs=space:·,tab:>-      " Show space as ·, tab as clear spaces
" set list                     " Show special characters
set mouse=a                  " Enable mouse support
set noshowmode               " Don't show INSERT/NOMRAL/VISUAL modes
set number                   " Enable line number
set ruler                    " Show cursor position all time
set shortmess=aoOtT          " Short messages
set showcmd                  " Display incomplete command
set splitbelow               " Place new window below on :split
set splitright               " Place new window right on :vsplit
set t_Co=256                 " Set color depth
set termguicolors            " Enable true colors support
set title                    " Set console title
set ttyfast                  " Smooth rendering
set ttymouse=sgr             " Fix mouse support in half screen
set visualbell               " Flash the screen instead of beeping on errors
set wildmenu                 " Show matching text on status line when <TAB>
set whichwrap=b,s,<,>,[,]    " move cursor across lines, Normal: <,>, Insert:[,]
syn enable       " Syntax highlighting on, w/o overriding
colorscheme monokai " Set colorscheme 
highlight clear CursorLine   " No underline on text when cursorline is on
highlight clear CursorLineNR " No underline on line numbers when cursorline is on

" Auto Completion Settings
" ````````````````````````
"set complete+=d,t " scan for defined name/macro, include tag completion
"set cscopetag     " Use cscope for tag commands.
"set cscopeverbose " Give messages when adding a cscope database.


" Search Options
" ``````````````
" {{{
set hlsearch   " Enable search highlighting
set ignorecase " Ignore case when searching
set incsearch  " Incremental search that shows partial matches
set smartcase  " Switch search to case-sensitive when query contains an uppercase letter
" }}}

" function GtagsCursorRef()
"     let cwrd = expand("<cword>")
"     return ':Gtags -r ' . cwrd
" endfunction

"if exists("$GTAGS_VIM")
"    let g:Gtags_Auto_Map = 0
"    source $GTAGS_VIM
"    nnoremap <leader>d :GtagsCursor<CR>
"    nnoremap <expr> <leader>r GtagsCursorRef() . "<CR>"
"endif


" Filetype Specific Options
" `````````````````````````
autocmd BufNewFile,BufRead *.qel set filetype=tcl " Set qel filetype as tcl
autocmd BufNewFile,BufRead *.cyt set filetype=sh  " Set cyt filetype as bash
autocmd BufNewFile,BufRead *.make set filetype=make  " Set cyt filetype as bash
autocmd BufNewFile,BufRead *.v set filetype=verilog  " Set cyt filetype as bash
autocmd BufNewFile,BufRead *.vg set filetype=verilog  " Set cyt filetype as bash
"autocmd Filetype make set noexpandtab shiftwidth=7 softtabstop=0 nocin
filetype indent on " File based indentation


" Mappings
" ````````
" {{{
map <C-a> ^
map <C-e> $
" }}}


let g:termdebug_wide = 163
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
autocmd FilterWritePre * if &diff | setlocal wrap< | endif
let ycm_confirm_extra_conf = 0

let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
autocmd VimLeave * let &t_me="\e[0 q" " resets cursor
"Cursor settings:

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" vim: fdm=marker
