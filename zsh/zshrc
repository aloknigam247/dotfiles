
#  █████╗ ██╗      ██████╗ ██╗  ██╗    ███╗   ██╗██╗ ██████╗  █████╗ ███╗   ███╗
# ██╔══██╗██║     ██╔═══██╗██║ ██╔╝    ████╗  ██║██║██╔════╝ ██╔══██╗████╗ ████║
# ███████║██║     ██║   ██║█████╔╝     ██╔██╗ ██║██║██║  ███╗███████║██╔████╔██║
# ██╔══██║██║     ██║   ██║██╔═██╗     ██║╚██╗██║██║██║   ██║██╔══██║██║╚██╔╝██║
# ██║  ██║███████╗╚██████╔╝██║  ██╗    ██║ ╚████║██║╚██████╔╝██║  ██║██║ ╚═╝ ██║
# ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝    ╚═╝  ╚═══╝╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝

# TODO: Powershell like key mappings, list mappings
# Updating local dofiles
update_dotfiles() {
    cd ~/dotfiles
    git pull

    if [[ $(git -C ~/dotfiles status -s) ]]; then
        git add . && git commit -m "$(date +'%d-%m-%Y updates')" && git push
    fi
}

update_dotfiles &  # Call the function in the background

autoload -Uz compinit
compinit

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#8d99ae"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
source ~/.zsh-suggest

#test -f ~/.local/zshrc && source ~/.local/zshrc
export TZ='Asia/Kolkata'

# Shortnames
alias cp='cp -rf'
alias eld='echo $LD_LIBRARY_PATH | sed "s/:/\n/g"'
alias epath='echo $PATH | sed "s/:/\n/g"'
alias g='gvim'
if [[ $(alias gdb) == "" ]]; then
alias gdb='gdb -q'
fi
alias grep='egrep --color=auto -n'
alias jobs='jobs -l'
alias killlast='kill -9 %%'
alias la='ls -AF --color=auto'
alias ll='ls -lF --color=auto --time-style=+"%a %d/%b/%Y %_I:%M%P"'
alias lla='ls -AlF --color=auto --time-style=+"%a %d/%b/%Y %_I:%M%P"'
alias ls='ls -F --color=auto'
alias rm='rm -rf'
alias settings='vim /mnt/c/Users/alokn/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json'
alias sr='source ~/.zshrc'
alias tree='tree -CF'
alias treea='tree -aCF'
alias v="/mnt/c/Users/aloknigam/scoop/shims/neovide.exe --wsl --multigrid --geometry=110x40"
alias vpcl='nvim -c PlugClean! -c qa'
alias vpi='nvim -c PlugInstall -c qa'

export EDITOR=$(which nvim)

# git shortcuts
alias ga='git add . && git status -b -s'
alias gb='git branch'
alias gc='git checkout'
alias gcl='git clean -dfx'
alias gdt='git difftool -y'
alias gs='git status --ignore-submodules=all --short --branch --show-stash --ahead-behind'

#---------------+
# gtags aliases |
#---------------+
alias cs='gtags-cscope -d'
alias csi='gtags-cscope -C -d'
alias gd='global -d --color=auto --result=grep'
alias gf='global -f --color=auto --result=grep'
alias gp='global -P'
alias gr='global -r --color=auto --result=grep'
alias gu='global -vu'
export GTAGSFORCECPP

#----------------+
# suffix aliases |
#----------------+
alias -s {c,C,cc,h,H}=gvim

setopt APPEND_HISTORY
setopt EMACS
setopt AUTO_CD
setopt ALWAYS_TO_END
# setopt NO_CLOBBER
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
#setopt INC_APPEND_HISTORY
setopt LIST_PACKED
setopt MENU_COMPLETE
#setopt NO_EXTENDED_HISTORY
setopt PROMPT_SUBST
setopt PUSHD_IGNORE_DUPS
#setopt SHARE_HISTORY
setopt SH_WORD_SPLIT # splits variable value on space

HISTSIZE=5000
HISTFILE=~/.cache/zsh_history
SAVEHIST=5000

eval $(dircolors ~/.dircolors)

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[Z" reverse-menu-complete
bindkey "^[w" kill-region
bindkey "^[[3~" delete-char
# bindkey "^I" expand-or-complete-with-dots
# bindkey "^X^E" edit-command-line
# bindkey "^[OF" end-of-line
# bindkey "^[OH" beginning-of-line
# bindkey "^[[3;5~" kill-word
# bindkey -s "^[l" "ls^J"
# bindkey "^[m" copy-prev-shell-word
# bindkey " " magic-space
# bindkey -R "!"-"~" self-insert

# complettion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _match _complete _approximate
zstyle ':completion:*' file-sort name
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{-_}={_-}' 'r:|[._-/]=** r:|=**' 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' menu select=1
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' verbose true

#zstyle :compinstall filename '/home/alokn/.zshrc'
uln() {
    for i in $*; do
        if [[ -L $i ]]; then
            lnk=$(realpath $i)
            rm $i
            cp $lnk $i
        else
            echo "Not a link $i"
        fi
        shift
    done 
}

wh() {
    case "$(type $1)" in
        *function*)
            whence -f $1
            ;;
        *)
            which $1
            ;;
    esac
}
compdef wh=which

bk() {
    cp $1 $1.bk
}

alias bell='tput bel'
cd

# export LESS_TERMCAP_mb=$'\E[01;31m'
# export LESS_TERMCAP_md=$'\E[01;31m'
# export LESS_TERMCAP_me=$'\E[0m'
# export LESS_TERMCAP_se=$'\E[0m'
# export LESS_TERMCAP_so=$'\E[01;44;37m'
# export LESS_TERMCAP_ue=$'\E[0m'
# export LESS_TERMCAP_us=$'\E[01;33m'

# TODO: Prompt similar to Powershell
# FIX: Fix function name
# FEAT: Use params like Powershell
# FIX: headonly
# FIX: noreset
function format_text() {
    local text=$1
    local bg=$2
    local fg=$3
    local styles=$4
    local headonly=$5
    local noreset=$6

    local head=""

    # create background header
    if [[ -n $bg ]]; then
        local bg_r_hex=${bg[2,3]}
        local bg_g_hex=${bg[4,5]}
        local bg_b_hex=${bg[6,7]}
        local bg_r=$((16#$bg_r_hex))
        local bg_g=$((16#$bg_g_hex))
        local bg_b=$((16#$bg_b_hex))
        head="48;2;${bg_r};${bg_g};${bg_b}"
    fi

    # create foreground header
    if [[ -n $fg ]]; then
        if [[ -n $head ]]; then head+=";"; fi # separator
        local fg_r_hex=${fg[2,3]}
        local fg_g_hex=${fg[4,5]}
        local fg_b_hex=${fg[6,7]}
        local fg_r=$((16#$fg_r_hex))
        local fg_g=$((16#$fg_g_hex))
        local fg_b=$((16#$fg_b_hex))
        head+="38;2;${fg_r};${fg_g};${fg_b}"
        fi

    # create effects header
    for style in ${(s/,/)styles}; do
        if [[ -n $head ]]; then head+=";"; fi # separator
        case $style in
            blink) head+="5" ;;
            bold) head+="1" ;;
            hidden) head+="8" ;;
            italic) head+="3" ;;
            reverse) head+="7" ;;
            strikethrough) head+="9" ;;
            underline) head+="4" ;;
        esac
    done

    if [[ -n $head ]]; then
        head="\e[${head}m"
        if [[ $headonly == true ]]; then
            echo $head
            return
        fi
        head+=$text
        if [[ $noreset != true ]]; then
            head+="\e[0m"
        fi
    else
        head=$text
    fi

    echo $head
}

# TODO: Powershell like redering blocks
function prompt_gen() {
    zmodload zsh/nearcolor

    local BG="15"
    local FG="0"
    local SEG=""
    local SEP="$1"
    local p_SEP=""
    local p_BG=""
    local prompt_str=""

    shift

    while [[ $# -ne 0 ]]; do
        for k v in $1; do
            case $k in
                "BG")
                    BG=$v
                    ;;
                "FG")
                    FG=$v
                    ;;
                "SEG")
                    SEG=$v
                    ;;
            esac
        done

        if [[ $p_SEP ]]; then
            p_SEP="%K{$BG}%F{$p_BG}$SEP "
        fi

        pr="$p_SEP%K{$BG}%F{$FG}$SEG "
        p_SEP="%k%F{$BG}$SEP "
        p_BG=$BG

        prompt_str="$prompt_str$pr"

        shift
    done

    export PROMPT="$prompt_str$p_SEP%k%f"
}

prompt_gen "" "BG #4392F1 FG #ECE8EF SEG %M" "BG #ECE8EF FG #4392F1 SEG %~"

function rprompt() {
    branch=$(git rev-parse --abbrev-ref HEAD 2>& /dev/null)

    if [[ $branch ]]; then
        echo "%F{#4392F1}%F{#ECE8EF}%K{#4392F1} $branch%k%F{#4392F1}%f"
    fi
}

export RPROMPT='$(rprompt)'

PATH=.:$PATH
